name: capataz
version: '0.1.0.0'
synopsis: OTP-like supervision trees in Haskell
description: |
  `capataz` enhances the reliability of your concurrent applications by offering
  supervision of green threads that run in your application.

  Advantages over standard library:

  * Links related long-living processes together under a common capataz
    supervisor, with restart/shutdown order

  * Set restart strategies (Permanent, Transient, Temporary) on `IO`
    sub-routines on a granular level

  * Set restart strategies on a pool of long-living worker threads (AllForOne,
    OneForOne)

  * Complete telemetry on the sub-routine lifecycle of your application (start,
    error, restarts, shutdown)

category: Control, Concurrency
author: Roman Gonzalez
maintainer: open-source@roman-gonzalez.info
copyright: Â© 2018 Roman Gonzalez
license: MIT
license-file: LICENSE
github: roman/Haskell-capataz
tested-with: GHC==8.0.1 GHC==8.0.2 GHC==8.2.1
extra-source-files:
- README.md
- CHANGELOG.md

ghc-options:
- -Wall
# as recommended in:
# https://functor.tokyo/blog/2017-07-28-ghc-warnings-you-should-enable
- -Wincomplete-uni-patterns
- -Wincomplete-record-updates

dependencies:
- base
- async
- bytestring
- data-default
- microlens
- protolude
- safe-exceptions
- stm
- teardown
- text
- time
- unordered-containers
- uuid
- vector

library:
  source-dirs: src
  exposed-modules:
  - Control.Concurrent.Capataz
  - Control.Concurrent.Capataz.Event
  - Control.Concurrent.Capataz.Lens
  - Control.Concurrent.Capataz.Internal.Core
  - Control.Concurrent.Capataz.Internal.Types
  - Control.Concurrent.Capataz.Internal.Types.Lens
  - Control.Concurrent.Capataz.Internal.Supervisor
  - Control.Concurrent.Capataz.Internal.Util
  - Control.Concurrent.Capataz.Internal.Worker

tests:
  capataz-test:
    main: Main.hs
    source-dirs: test/testsuite
    ghc-options:
    - -threaded
    dependencies:
    - tasty
    - tasty-hunit
    - tasty-smallcheck
    - tasty-rerun
    - pretty-show
    - capataz

stability: alpha (experimental)
